# generates synthetic dataaa  using the real comscatter
# but providing only one field FISH_SA  generated by lognormal simulation

import tatukgis_pdk as pdk
import numpy as np

def generate_abundance_with_rare_tail(p_tail=0.05):
    """
    Generate skewed fish-like abundance values:
    - 95% from a right-skewed Beta in [1, 3000]
    - 5% from a long log-normal tail, reaching >10,000
    """
    if np.random.rand() < p_tail:
        # Tail: wide log-normal centered at 20,000
        tail_val = np.random.lognormal(mean=np.log(20000), sigma=0.5)
        return min(tail_val, 30000)  # enforce upper bound
    else:
        # Core: tight right-skewed distribution
        core_val = np.random.beta(a=2.2, b=6.5)
        return 1 + core_val * (3000 - 1)
def generate_skewed_abundance(p_tail=0.02):
    """
    Simulate abundance values:
    - ~98% from a right-skewed core (1–3000)
    - ~2% rare high values >10,000, reaching up to ~30,000
    """
    if np.random.rand() < p_tail:
        # Rare event: heavy tail value
        tail = np.random.lognormal(mean=np.log(15000), sigma=0.3)
        return min(tail, 30000)
    else:
        # Core distribution: right-skewed but capped at 3000
        core = np.random.beta(a=2.0, b=7.0)
        return 1 + core * (3000 - 1)
def generate_fish_like_abundance(p_tail=0.03):
    """
    Custom mixture distribution:
    - 97% of values from a tight right-skewed Beta (100–3000)
    - 3% rare high values from a log-normal tail (3000–30000)
    """
    if np.random.rand() < p_tail:
        # Tail component: log-normal around 15,000 with soft tail
        x = np.random.lognormal(mean=np.log(15000), sigma=0.3)
        return min(x, 30000)  # enforce upper limit
    else:
        # Core distribution: tight right-skewed
        beta_sample = np.random.beta(a=2.2, b=6.0)  # mode around ~300
        return 100 + beta_sample * (3000 - 100)
def generate_realistic_skewed_value(a=2.5, b=5.5, lower=100, upper=3000):
    """
    Generate values similar to real abundance dataaa:
    - Right-skewed
    - Mostly between 100–3000
    - Mode around 500–1000
    """
    x = np.random.beta(a, b)
    return lower + x * (upper - lower)

def draw_sample_lognormal():
    mu = 5.36 #8.5       # controls center
    sigma = 0.25 # 2.5    # controls spread
    return np.random.lognormal(mean=mu, sigma=sigma)


def generate_smooth_skewed_value(a=5, b=15, lower=100, upper=30000):
    """
    Generate a smooth, right-skewed value with peak near the lower bound,
    and long, smooth tail toward the upper bound.

    Parameters:
        a, b (float): Beta distribution shape parameters (a < b = right-skew)
        lower, upper (float): Range of the output values

    Returns:
        float: A smooth, skewed sample in [lower, upper]
    """
    x = np.random.beta(a, b)
    return lower + x * (upper - lower)

def make_synthetic_comscatter(lay : pdk.TGIS_LayerVector, maxdepth : float = 50) -> pdk.TGIS_LayerVector:
    """
     produces fake comscatter vector layer of the same structure as input lat  with only field 'FISH_SA'
    :param lay: input real comscatter laye
    :param maxdepth: mamximum non zero depth
    :return: synthetic comscatter layer
    """
    syn = pdk.TGIS_LayerVector()
    syn.SetCSByEPSG(lay.CS.EPSG)
    syn.name = 'SYNTHETIC_COMSCATTER'
    syn.Caption = 'NASC - computer generated'
    syn.AddField('FISH_SA', pdk.TGIS_FieldType().Float, 1, 0)
    syn.Open()

    np.random.seed(42)

    for shp in lay.Loop():
        sho = syn.CreateShape(pdk.TGIS_ShapeType().Point)
        sho.Lock(pdk.TGIS_Lock().Projection)
        sho.AddPart()
        sho.CopyGeometry(shp)
        depth = shp.getField('DEPTH')
        if depth < maxdepth:
            val =  generate_abundance_with_rare_tail()
            print(val)
            sho.setField('FISH_SA', val)
        else:
            sho.setField('FISH_SA',0)
        sho.Unlock()

    syn.RecalcExtent()
    return syn



